#!/usr/bin/env node

const http = require("http");
const debug = require("debug")("greenland:server");
const app = require("../app");

// Get port from environment and store in Express
const PORT = normalizePort(process.env.PORT || "3000");
app.set("port", PORT);

// Create HTTP server
const server = http.createServer(app);

// Start server
server.listen(PORT, () => {
  console.log(`✅ Server is live on http://localhost:${PORT} 🚀`);
});

// Attach event listeners
server.on("error", onError);
server.on("listening", onListening);

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port;  // valid port number
  return false;
}

// Handle server "error" event
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;

  switch (error.code) {
    case "EACCES":
      console.error(`❌ ${bind} requires elevated privileges 🔑`);
      process.exit(1);
    case "EADDRINUSE":
      console.error(`❌ ${bind} is already in use 🔄`);
      process.exit(1);
    default:
      throw error;
  }
}

// Handle server "listening" event
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`🎧 Listening on ${bind}`);
}
